# -*- coding: utf-8 -*-
"""Heart Disease Predictive Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eCNwB3f5kwQJ0AYB8VQpMpYrGdfMTSa6

**Heart Disease Prediction**
--
*By: JOTJIT NATH*
"""

import numpy as np
import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/SmartKnower/Minor Project/heart.csv')

df.head()

df.columns

df.shape

import seaborn as sns
import matplotlib.pyplot as plt

sns.set_style("whitegrid")

plt.figure(figsize =(8, 6))
f = sns.countplot(x = 'target', data = df, hue = 'sex')
plt.legend(['Female', 'Male'])
f.set_title("Heart disease gender wise")
f.set_xticklabels(['No Heart disease', 'Heart Disease'])
plt.xlabel("")

plt.figure(figsize =(8, 6))
f = sns.countplot(x='cp', data=df, hue='target')
f.set_title("Heart Disease Presence Distribution")
f.set_xticklabels(['Typical Angina', 'Atypical Angina', 'Non-anginal Pain', 'Asymptomatic'])
plt.ylabel("Chest Pain Type")
plt.xlabel("")
plt.legend(['No Disease', 'Disease'])

plt.figure(figsize=(10, 8))
plt.scatter(df.age[df.target==1],
    df.thalach[df.target==1],
    c="salmon")
plt.scatter(df.age[df.target==0],
    df.thalach[df.target==0],
    c="lightblue")
plt.title("Heart Disease in function of Age and Max Heart Rate")
plt.xlabel("Age")
plt.ylabel("Max Heart Rate")
plt.legend(["Disease", "No Disease"]);

plt.figure(figsize =(10, 8))
f = sns.countplot(x='target', data=df)
f.set_title("Heart Disease Presence Distribution")
f.set_xticklabels(['No Heart disease', 'Heart Disease'])
plt.xlabel("");

feature_columns = []
for header in ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'ca']:
    feature_columns.append(tf.feature_column.numeric_column(header))
feature_columns

from sklearn.model_selection import train_test_split
import tensorflow as tf

def df_to_dataset(dataframe, batch_size=32):
    dataframe = dataframe.copy()
    labels = dataframe.pop('target')
    return tf.data.Dataset.from_tensor_slices((dict(dataframe), labels)) \
          .shuffle(buffer_size=len(dataframe)) \
          .batch(batch_size)

train, test = train_test_split(df, test_size=0.2, random_state=32)
train_ds = df_to_dataset(train)
test_ds = df_to_dataset(test)

for feature_batch, label_batch in train_ds.take(2):
    print('Every feature:', list(feature_batch.keys()))
    print('A batch of ages:', feature_batch['age'])
    print('A batch of targets:', label_batch )

feature_layer = tf.keras.layers.DenseFeatures(feature_columns)
feature_layer

model = tf.keras.models.Sequential([
  feature_layer,
  tf.keras.layers.Dense(units=128, activation='relu'),
  tf.keras.layers.Dropout(rate=0.2),
  tf.keras.layers.Dense(units=128, activation='relu'),
  tf.keras.layers.Dense(units=1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_ds, validation_data=test_ds, epochs=100, use_multiprocessing=True)

model.evaluate(test_ds)

plt.figure(figsize =(10, 6))
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.ylim((0, 1))
plt.legend(['Train', 'Test'], loc='upper left');

predictions = model.predict(test_ds)
bin_predictions = tf.round(predictions).numpy().flatten()
bin_predictions

"""**Thank You** 
--
"""